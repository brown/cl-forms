\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@settitle CL-FORMS
@syncodeindex pg cp
@setfilename cl-forms.info
@include common-lisp.texi

@copying

Copyright @copyright{} 2021 Mariano Montone

@end copying


@dircategory Common Lisp
@direntry
* cl-forms: (cl-forms) Common Lisp web forms handling library.
@end direntry

@titlepage
@title CL-FORMS

@author Mariano Montone ( @email{marianomontone@@gmail.com} )
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Top
@cindex cl-forms

@menu
* Intro::
* Installation::
* Usage::
* API::
* Index::
@end menu

@node Intro
@chapter Introduction
@anchor{introduction}

CL-FORMS is a web forms handling library for Common Lisp.

Although it is potentially framework agnostic, it runs on top of Hunchentoot at the moment.

It features:

@itemize @bullet
@item
Several form field types: String, boolean, integer, email, password fields. And more.
@item Custom fields. CL-FORMS is extensible and it is possible to define new field types.
@item Server and client side validation
@item Rendering backends. Forms can be rendered via CL-WHO, or Djula, or something else; the backend is pluggable. The default renderer is CL-WHO.
@item Themes (like Bootstrap)
@item Control on rendering and layout.
@item Handling of form errors.
@item CSRF protection
@end itemize

@node Installation
@chapter Installation
@anchor{installation}

@node Usage
@chapter Usage
@anchor{usage}

@section Basics

Use @clref{CL-FORMS, DEFFORM, macro} to define a form. Example:

@lisp
(defform fields-form (:action "/fields-post")
  ((name :string :value "")
   (ready :boolean :value t)
   (sex :choice :choices (list "Male" "Female") :value "Male")
   (submit :submit :label "Create")))
@end lisp

On your web handler, grab the form via @clref{CL-FORMS,FIND-FORM,function}, select a renderer with `with-form-renderer`and then render the form with @clref{CL-FORMS,RENDER-FORM,function}:

@lisp
(let ((form (forms::find-form 'fields-form)))
   (forms:with-form-renderer :who
      (forms:render-form form))
@end lisp

To handle the form, grab it via @clref{CL-FORMS,FIND-FORM,function} and then call @clref{CL-FORMS,HANDLE-REQUEST,function} (you should probably also call @clref{CL-FORMS,VALIDATE-FORM,function} after). 
Then bind form fields via either @clref{CL-FORMS,WITH-FORM-FIELD-VALUES,macro}, that binds the form field values; or @clref{CL-FORMS,WITH-FORM-FIELDS,macro} that binds the form fields.

@lisp
(let ((form (forms:find-form 'fields-form)))
    (forms::handle-request form)
    (forms::with-form-field-values (name ready sex) form
       (who:with-html-output (forms.who::*html*)
          (:ul
            (:li (who:fmt "Name: ~A" name))
            (:li (who:fmt "Ready: ~A" ready))
            (:li (who:fmt "Sex: ~A" sex))))))
@end lisp

Please have a look at the demo sources for more examples of how to use the library

@section Demo

There's a demo included. To run:

@lisp
(require :cl-forms.demo)
(forms.test:run-demo)
@end lisp

@subsection Basic example

Define a form. Render the form via CL-WHO backend, doing:

@lisp
(forms:with-form-renderer :who
   (forms:render-form form))
@end lisp

Then handle and validate the form.

Source code:

@lisp
@include ../test/demo/fields.lisp
@end lisp

@subsection Validation

Example of forms validation.

Add Clavier constraints to the form. Then call @clref{CL-FORMS, VALIDATE-FORM, function} after @clref{CL-FORMS, HANDLE-REQUEST, function}.

@lisp
@include ../test/demo/validation.lisp
@end lisp

@subsection Client validation

To validate in the client, just set @code{:client-validation} to @code{T}.

@lisp
@include ../test/demo/client-validation.lisp
@end lisp

@subsection Models

Forms can be attached to model objects. Model objects are CLOS instances from where form values are read and written to.

To work with models, forms are defined via defform-builder instead of defform. A form-builder is a function that takes the model objects and attaches it to the form. The form needs to define the accessors to access the model for each form field.

@lisp
@include ../test/demo/models.lisp
@end lisp

@subsection Composition

It is possible to compose forms using the @code{subform} field type:

@lisp
@include ../test/demo/composition.lisp
@end lisp

@subsection Form templates

Form templates is an alternative way of defining and rendering forms. Instead of defining a form with defform and then specifiying a template and render it, forms templates allow to do all that at the same time.

@lisp
@verbatiminclude ../test/demo/form-templates.lisp
@end lisp

@subsection Renderers

@lisp
@include ../test/demo/renderers.lisp
@end lisp

@node Form rendering
@section Form rendering

A form can be rendered via different renderers and themes.
There are implemented renderers for CL-WHO and Djula.
The only theme at the moment is a Bootstrap theme that runs under CL-WHO.

To be able to render a form a form renderer needs to be bound first. Renderers are bound using @clref{CL-FORMS,WITH-FORM-RENDERER,macro} macro.

Similarly, to use a theme other than the default one, it needs to be bound using @clref{CL-FORMS,WITH-FORM-THEME,macro}.

@subsection Form rendering functions

Forms are renderer using @clref{CL-FORMS,RENDER-FORM,function} to render the whole form all at once, or via @clref{CL-FORMS,RENDER-FORM-START,function},@clref{CL-FORMS,RENDER-FORM-END,function},@clref{CL-FORMS,RENDER-FIELD,function},@clref{CL-FORMS,RENDER-FIELD-LABEL,function},@clref{CL-FORMS,RENDER-FIELD-WIDGET,function}, to only render specific parts of a form and have more control.

@node CL-WHO renderer
@subsection CL-WHO renderer

The CL-WHO renderer uses CL-WHO library for rendering forms.

Needs @code{cl-forms.who} ASDF system loaded.

To render a form using CL-WHO bind the renderer via @clref{CL-FORMS,WITH-FORM-RENDERER, macro}, bind @code{FORMS.WHO:*HTML*} variable, and then render the form:

@lisp
(let ((form (forms::find-form 'fields-form)))
   (who:with-html-output (forms.who:*html*)
      (forms:with-form-renderer :who
         (forms:render-form form))))
@end lisp

@node Bootstrap theme
@subsection Bootstrap theme

There's a Bootstrap theme implemented for CL-WHO renderer.

Needs @code{cl-forms.who.bootstrap} ASDF system loaded.

Select the theme via @clref{CL-FORMS,WITH-FORM-THEME,macro}:

@lisp
(let ((form (forms::find-form 'bs-fields-form)))
    (forms:with-form-theme 'forms.who::bootstrap-form-theme
      (forms:with-form-renderer :who
        (who:with-html-output (forms.who::*html*)
           (forms:render-form form)))))
@end lisp

@node Djula
@subsection Djula

CL-FORMS integrates with Djula template system.

Needs @code{cl-forms.djula} ASDF system loaded.

Djula tags:
@itemize
@item @code{@{% form form %@}}. Renders a whole form.
@item @code{@{% form-start form %@}}. Renders the form start part.
@item @code{@{% form-end form %@}}. Renders the form end part.
@item @code{@{% form-row form field-name %@}}. Renders the row with label and widget for the form field.
@item @code{@{% form-field-label form field-name %@}}. Renders the form field label.
@item @code{@{% form-field-widget form field-name %@}}. Renders the form field widget.
@end itemize

Make sure to @code{@{% set-package %@}} at the beggining of your Djula template to the package where the form lives. Otherwise, Djula wont' be able to find form fields by name.

Examples:

A Djula template that renders a whole form:

@verbatim
{% form form %}
@end verbatim

A Djula template that renders a form by parts:

@verbatim
{% set-package forms.test %}

{% form-start form %}
{% form-row form name %}
{% form-row form ready %}
<div>
  {% form-field-label form sex %}
  {% form-field-widget form sex %}
</div>
{% form-row form avatar %}
{% form-row form disabled %}
{% form-row form disabled-checkbox %}
{% form-row form readonly-checkbox %}
{% form-row form submit %}
{% form-end form %}
@end verbatim

@node API
@chapter API
@anchor{api}

@menu
* CL-FORMS package::
@end menu

@node CL-FORMS package
@section CL-FORMS package
@deftp PACKAGE CL-FORMS

@end deftp

@heading External definitions

@subheading Variables
@cldefvar {CL-FORMS, *BASE64-ENCODE*}

Whether to encode form parameters in base64 or not.
@endcldefvar

@subheading Macros
@cldefmacro {CL-FORMS, WITH-FORM-FIELD-VALUES, (fields form &body body)}

Bind the value of FIELDS in FORM.

Example:

@lisp
(with-form-field-values (name) form
   (print name))
@end lisp
@endcldefmacro

@cldefmacro {CL-FORMS, WITH-FORM, (form &body body)}

Bind *FORM* to FORM and evaluate BODY in that context.
@endcldefmacro

@cldefmacro {CL-FORMS, DEFFORM-BUILDER, (form-name args &body body)}

Registers a function with arguments ARGS and body BODY as a form builder.

BODY is expected to instantiate a FORM object using ARGS in some way.

FORM-NAME is the symbol under which the FORM is registered.

Use FIND-FORM with FORM-NAME and expected arguments to obtain the registered form.
@endcldefmacro

@cldefmacro {CL-FORMS, WITH-FORM-THEME, (form-theme &body body)}

Bind *FORM-THEME* to FORM-THEME and evaluate BODY in that context.
@endcldefmacro

@cldefmacro {CL-FORMS, WITH-FORM-FIELDS, (fields form &body body)}

Bind FIELDS to the form fields in FORM.

Example:

@lisp
(with-form-fields (name) form
   (print (field-value name)))
@end lisp

Also see: WITH-FORM-FIELD-VALUES 
@endcldefmacro

@cldefmacro {CL-FORMS, WITH-FORM-TEMPLATE, ((&optional form-var) form-name args &body body)}

Define a FORM named FORM-NAME and render it at the same time.
@endcldefmacro

@cldefmacro {CL-FORMS, WITH-FORM-RENDERER, (renderer &body body)}

Bind *FORM-RENDERER* to RENDERER and evaluate BODY in that context.
@endcldefmacro

@cldefmacro {CL-FORMS, DEFFORM, (form-name args fields)}

Define a form at top-level.

ARGS are the arguments passed to FORM class via MAKE-INSTANCE.
FIELDS are the form field specs.

@lisp
(forms:defform client-validated-form (:action "/client-validation-post"
                                              :client-validation t)
  ((name :string :value "" :constraints (list (clavier:is-a-string)
                                              (clavier:not-blank)
                                              (clavier:len :max 5))
         :validation-triggers '(:focusin))
   (single :boolean :value t)
   (sex :choice :choices (list "Male" "Female") :value "Male")
   (age :integer :constraints (list (clavier:is-an-integer)
                                    (clavier:greater-than -1)
                                    (clavier:less-than 200)))
   (email :email)
   (submit :submit :label "Create")))
@end lisp
@endcldefmacro

@subheading Generic functions
@cldefgeneric {CL-FORMS, FIELD-ACCESSOR, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {CL-FORMS, FIELD-WRITER, (field)}


@endcldefgeneric

@cldefgeneric {CL-FORMS, FIELD-READER, (field)}


@endcldefgeneric

@cldefgeneric {CL-FORMS, FIELD-PARSER, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {CL-FORMS, FORM-ERRORS, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {CL-FORMS, FORMAT-FIELD-VALUE, (form-field field-value &optional stream)}


@endcldefgeneric

@cldefgeneric {CL-FORMS, FIELD-FORMATTER, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {CL-FORMS, FIELD-VALUE, (field)}


@endcldefgeneric

@cldefgeneric {CL-FORMS, FIELD-VALID-P, (form-field &optional (form))}


@endcldefgeneric

@subheading Functions
@cldefun {CL-FORMS, RENDER-FORM, (&optional (form *form*) &rest args)}

Top level function to render the web form FORM.
*FORM-RENDERER* and *FORM-THEME* need to be bound.
See: WITH-FORM-RENDERER, WITH-FORM-THEME
@endcldefun

@cldefun {CL-FORMS, FILL-FORM-FROM-MODEL, (form model)}

Fill a FORM from a MODEL.
Read MODEL using FORM accessors and set the FORM field values.
@endcldefun

@cldefun {CL-FORMS, FIND-FORM, (name &rest args)}

Get the form named NAME.

ARGS is the list of arguments to pass to a possible form builder function.

See: DEFFORM-BUILDER macro.
@endcldefun

@cldefun {CL-FORMS, RENDER-FIELD, (field &optional (form *form*) &rest args)}

Render form FIELD, both label and widget.
@endcldefun

@cldefun {CL-FORMS, REMOVE-FIELD, (form field)}


@endcldefun

@cldefun {CL-FORMS, FORM-VALID-P, (form)}


@endcldefun

@cldefun {CL-FORMS, GET-FIELD, (form field-name &optional (error-p t))}


@endcldefun

@cldefun {CL-FORMS, GET-FIELD-VALUE, (form field-name &optional (error-p t))}


@endcldefun

@cldefun {CL-FORMS, RENDER-FORM-END, (&optional (form *form*))}

Render the end of the web form FORM.
@endcldefun

@cldefun {CL-FORMS, HANDLE-REQUEST, (&optional (form *form*) (request hunchentoot:*request*))}

Populates FORM from parameters in HTTP request. After this, the form field contains values, but they are not validated. To validate call VALIDATE-FORM after.
@endcldefun

@cldefun {CL-FORMS, FILL-MODEL-FROM-FORM, (form model)}

Set a MODEL's values from FORM field values.
@endcldefun

@cldefun {CL-FORMS, MAKE-FORMATTER, (symbol)}

Create a field formatter. SYMBOL is the function to call.
@endcldefun

@cldefun {CL-FORMS, RENDER-FIELD-LABEL, (field &optional (form *form*) &rest args)}

Render the label of FIELD.
@endcldefun

@cldefun {CL-FORMS, FORMAT-FIELD-VALUE-TO-STRING, (form-field &optional (field-value (field-value form-field)))}


@endcldefun

@cldefun {CL-FORMS, RENDER-FIELD-ERRORS, (field &optional (form *form*) &rest args)}

Render the validation errors associated with FIELD.
@endcldefun

@cldefun {CL-FORMS, SET-FIELD-VALUE, (form field-name value)}


@endcldefun

@cldefun {CL-FORMS, VALIDATE-FORM, (&optional (form *form*))}

Validates a form. Usually called after HANDLE-REQUEST. Returns multiple values; first value is true if the form is valid; second value a list of errors.
The list of errors is an association list with elements (<field> . <field errors strings list>).
@endcldefun

@cldefun {CL-FORMS, RENDER-FORM-START, (&optional (form *form*) &rest args)}

Render only the beggining of the web form FORM.
Use RENDER-FIELD, RENDER-FIELD-LABEL, etc manually, after.
@endcldefun

@cldefun {CL-FORMS, RENDER-FIELD-WIDGET, (field &optional (form *form*) &rest args)}

Render FIELD widget.
@endcldefun

@cldefun {CL-FORMS, ADD-FORM-ERROR, (field error-msg &optional (form *form*))}

Add an error on FIELD
@endcldefun

@cldefun {CL-FORMS, RENDER-FORM-ERRORS, (&optional (form *form*) &rest args)}

Render a section for displaying form validation errors.
@endcldefun

@cldefun {CL-FORMS, ADD-FIELD, (form field)}


@endcldefun

@subheading Classes
@cldefclass {CL-FORMS, INTEGER-FORM-FIELD}

An integer input field

Class precedence list: @code{integer-form-field, form-field, standard-object, t}

@endcldefclass

@cldefclass {CL-FORMS, SUBFORM-FORM-FIELD}

A field that contains a form (subform)

Class precedence list: @code{subform-form-field, form-field, standard-object, t}

@endcldefclass

@cldefclass {CL-FORMS, URL-FORM-FIELD}

An url input field

Class precedence list: @code{url-form-field, form-field, standard-object, t}

@endcldefclass

@cldefclass {CL-FORMS, DATETIME-FORM-FIELD}

A date input field

Class precedence list: @code{datetime-form-field, form-field, standard-object, t}

@endcldefclass

@cldefclass {CL-FORMS, PASSWORD-FORM-FIELD}

A password input field

Class precedence list: @code{password-form-field, form-field, standard-object, t}

@endcldefclass

@cldefclass {CL-FORMS, EMAIL-FORM-FIELD}

A string input field

Class precedence list: @code{email-form-field, form-field, standard-object, t}

@endcldefclass

@cldefclass {CL-FORMS, CHOICE-FORM-FIELD}

A multi-purpose field used to allow the user to "choose" one or more options. It can be rendered as a select tag, radio buttons, or checkboxes.
NOTE: the defaults of this field type are too complicated for just working with string choices. STRING-CHOICE-FIELD is more convenient for that.

Class precedence list: @code{choice-form-field, form-field, standard-object, t}

Slots:
@itemize
@item @code{choices} --- initarg: @code{@w{:choices}}; writer: @code{@w{(setf cl-forms::field-choices)}}

An alist with the choices. Or a function with which to obtain the choices.@item @code{preferred-choices} --- initarg: @code{@w{:preferred-choices}}; reader: @code{@w{cl-forms::field-preferred-choices}}; writer: @code{@w{(setf cl-forms::field-preferred-choices)}}

If this option is specified, then a sub-set of all of the options will be moved to the top of the select menu.@item @code{expanded} --- initarg: @code{@w{:expanded}}; reader: @code{@w{cl-forms::field-expanded}}; writer: @code{@w{(setf cl-forms::field-expanded)}}

If set to true, radio buttons or checkboxes will be rendered (depending on the multiple value). If false, a select element will be rendered.@item @code{multiple} --- initarg: @code{@w{:multiple}}; reader: @code{@w{cl-forms::field-multiple}}; writer: @code{@w{(setf cl-forms::field-multiple)}}

If true, the user will be able to select multiple options (as opposed to choosing just one option). Depending on the value of the expanded option, this will render either a select tag or checkboxes if true and a select tag or radio buttons if false.@item @code{key-reader} --- initarg: @code{@w{:key-reader}}; reader: @code{@w{cl-forms::field-key-reader}}; writer: @code{@w{(setf cl-forms::field-key-reader)}}

Function to read the option key from the request@item @code{hash-function} --- initarg: @code{@w{:hash-function}}; reader: @code{@w{cl-forms::field-hash-function}}; writer: @code{@w{(setf cl-forms::field-hash-function)}}

The function to use for choices key@item @code{test} --- initarg: @code{@w{:test}}; reader: @code{@w{cl-forms::field-test}}; writer: @code{@w{(setf cl-forms::field-test)}}

Function to test equality between choices@item @code{use-key-as-value} --- initarg: @code{@w{:use-key-as-value}}; reader: @code{@w{cl-forms::use-key-as-value}}; writer: @code{@w{(setf cl-forms::use-key-as-value)}}

When T, use the key/s of the field as value of the field when it is read from request@end itemize

@endcldefclass

@cldefclass {CL-FORMS, FILE-FORM-FIELD}

A file input field

Class precedence list: @code{file-form-field, form-field, standard-object, t}

Slots:
@itemize
@item @code{multiple} --- initarg: @code{@w{:multiple-p}}; reader: @code{@w{cl-forms::multiple-p}}; writer: @code{@w{(setf cl-forms::multiple-p)}}

If this fields handles multiple file uploads@item @code{upload-handler} --- initarg: @code{@w{:upload-handler}}; reader: @code{@w{cl-forms::upload-handler}}; writer: @code{@w{(setf cl-forms::upload-handler)}}

Function that handles the file upload@item @code{accept} --- initarg: @code{@w{:accept}}; reader: @code{@w{cl-forms::file-accept}}; writer: @code{@w{(setf cl-forms::file-accept)}}

Files accepted. See https://www.w3schools.com/tags/att_input_accept.asp@end itemize

@endcldefclass

@cldefclass {CL-FORMS, BOOLEAN-FORM-FIELD}

A boolean input

Class precedence list: @code{boolean-form-field, form-field, standard-object, t}

@endcldefclass

@cldefclass {CL-FORMS, DATE-FORM-FIELD}

A date input field

Class precedence list: @code{date-form-field, form-field, standard-object, t}

@endcldefclass

@cldefclass {CL-FORMS, FORM-FIELD}

A form field

Class precedence list: @code{form-field, standard-object, t}

Slots:
@itemize
@item @code{name} --- initarg: @code{@w{:name}}; reader: @code{@w{cl-forms::field-name}}; writer: @code{@w{(setf cl-forms::field-name)}}

The field name@item @code{label} --- initarg: @code{@w{:label}}; reader: @code{@w{cl-forms::field-label}}; writer: @code{@w{(setf cl-forms::field-label)}}

The field label@item @code{value} --- initarg: @code{@w{:value}}

Field value@item @code{default-value} --- initarg: @code{@w{:default-value}}; reader: @code{@w{cl-forms::field-default-value}}; writer: @code{@w{(setf cl-forms::field-default-value)}}

Value to use when the field value is nil@item @code{placeholder} --- initarg: @code{@w{:placeholder}}; reader: @code{@w{cl-forms::field-placeholder}}; writer: @code{@w{(setf cl-forms::field-placeholder)}}

Field placeholder (text that appears when the field is empty)@item @code{help-text} --- initarg: @code{@w{:help-text}}; reader: @code{@w{cl-forms::field-help-text}}; writer: @code{@w{(setf cl-forms::field-help-text)}}

Field help text@item @code{parser} --- initarg: @code{@w{:parser}}; reader: @code{@w{cl-forms:field-parser}}; writer: @code{@w{(setf cl-forms:field-parser)}}

Custom field value parser@item @code{formatter} --- initarg: @code{@w{:formatter}}; reader: @code{@w{cl-forms:field-formatter}}; writer: @code{@w{(setf cl-forms:field-formatter)}}

The field formatter. The function takes two arguments, a VALUE and STREAM to format it into.@item @code{constraints} --- initarg: @code{@w{:constraints}}; reader: @code{@w{cl-forms::field-constraints}}; writer: @code{@w{(setf cl-forms::field-constraints)}}

A list of CLAVIER validators.@item @code{required} --- initarg: @code{@w{:required-p}}; reader: @code{@w{cl-forms::field-required-p}}; writer: @code{@w{(setf cl-forms::field-required-p)}}

Whether the field is required@item @code{required-message} --- initarg: @code{@w{:required-message}}; reader: @code{@w{cl-forms::field-required-message}}; writer: @code{@w{(setf cl-forms::field-required-message)}}

Message to display when field is required@item @code{invalid-message} --- initarg: @code{@w{:invalid-message}}; reader: @code{@w{cl-forms::field-invalid-message}}; writer: @code{@w{(setf cl-forms::field-invalid-message)}}

Message to display when field is invalid@item @code{read-only} --- initarg: @code{@w{:read-only-p}}; reader: @code{@w{cl-forms::field-read-only-p}}; writer: @code{@w{(setf cl-forms::field-read-only-p)}}

Whether the field is read only@item @code{disabled} --- initarg: @code{@w{:disabled-p}}; reader: @code{@w{cl-forms::field-disabled-p}}; writer: @code{@w{(setf cl-forms::field-disabled-p)}}

Whether the field is disabled@item @code{accessor} --- initarg: @code{@w{:accessor}}; reader: @code{@w{cl-forms:field-accessor}}; writer: @code{@w{(setf cl-forms:field-accessor)}}

The field accessor to the underlying model@item @code{reader} --- initarg: @code{@w{:reader}}

The function to use to read from the underlying model@item @code{writer} --- initarg: @code{@w{:writer}}

The function to use to write to underlying model@item @code{trim} --- initarg: @code{@w{:trim-p}}; reader: @code{@w{cl-forms::field-trim-p}}; writer: @code{@w{(setf cl-forms::field-trim-p)}}

Trim the input@item @code{validation-triggers} --- initarg: @code{@w{:validation-triggers}}; reader: @code{@w{cl-forms::field-validation-triggers}}; writer: @code{@w{(setf cl-forms::field-validation-triggers)}}

Client side validation triggers. A list of :change, :focus, :focusout, :focusin, etc@item @code{form} --- initarg: @code{@w{:form}}; reader: @code{@w{cl-forms::field-form}}; writer: @code{@w{(setf cl-forms::field-form)}}

The form the field belongs to@end itemize

@endcldefclass

@cldefclass {CL-FORMS, SUBMIT-FORM-FIELD}

A submit input button

Class precedence list: @code{submit-form-field, form-field, standard-object, t}

@endcldefclass

@cldefclass {CL-FORMS, HIDDEN-FORM-FIELD}

A hidden form field

Class precedence list: @code{hidden-form-field, form-field, standard-object, t}

@endcldefclass

@cldefclass {CL-FORMS, STRING-FORM-FIELD}

A string input field

Class precedence list: @code{string-form-field, form-field, standard-object, t}

@endcldefclass

@cldefclass {CL-FORMS, LIST-FORM-FIELD}

A field that contains a list of elements (either other fields or subforms)

Class precedence list: @code{list-form-field, form-field, standard-object, t}

Slots:
@itemize
@item @code{type} --- initarg: @code{@w{:type}}; reader: @code{@w{cl-forms::list-field-type}}; writer: @code{@w{(setf cl-forms::list-field-type)}}

The list elements type.@item @code{empty-item-predicate} --- initarg: @code{@w{:empty-item-predicate}}; reader: @code{@w{cl-forms::empty-item-predicate}}; writer: @code{@w{(setf cl-forms::empty-item-predicate)}}

A predicate that tells when a list item is considered empty, and so it is removed from the list@item @code{add-button} --- initarg: @code{@w{:add-button}}; reader: @code{@w{cl-forms::add-button-p}}; writer: @code{@w{(setf cl-forms::add-button-p)}}

Whether have a list 'ADD' button or not@item @code{remove-button} --- initarg: @code{@w{:remove-button}}; reader: @code{@w{cl-forms::remove-button-p}}; writer: @code{@w{(setf cl-forms::remove-button-p)}}

Whether add an item removal button or not@end itemize

@endcldefclass

@cldefclass {CL-FORMS, FORM}

A form

Class precedence list: @code{form, standard-object, t}

Slots:
@itemize
@item @code{id} --- initarg: @code{@w{:id}}; reader: @code{@w{cl-forms::form-id}}; writer: @code{@w{(setf cl-forms::form-id)}}

The form id@item @code{name} --- initarg: @code{@w{:name}}; reader: @code{@w{cl-forms::form-name}}; writer: @code{@w{(setf cl-forms::form-name)}}

The form name@item @code{action} --- initarg: @code{@w{:action}}; reader: @code{@w{cl-forms::form-action}}; writer: @code{@w{(setf cl-forms::form-action)}}

The form action@item @code{method} --- initarg: @code{@w{:method}}; reader: @code{@w{cl-forms::form-method}}; writer: @code{@w{(setf cl-forms::form-method)}}

The form method@item @code{enctype} --- initarg: @code{@w{:enctype}}; reader: @code{@w{cl-forms::form-enctype}}; writer: @code{@w{(setf cl-forms::form-enctype)}}

Form encoding type. i.e. Use multipart/form-data for file uploads@item @code{fields} --- initarg: @code{@w{:fields}}; reader: @code{@w{cl-forms::form-fields}}; writer: @code{@w{(setf cl-forms::form-fields)}}

Form fields@item @code{model} --- initarg: @code{@w{:model}}; reader: @code{@w{cl-forms::form-model}}; writer: @code{@w{(setf cl-forms::form-model)}}

The form model object@item @code{csrf-protection} --- initarg: @code{@w{:csrf-protection}}; reader: @code{@w{cl-forms::form-csrf-protection-p}}; writer: @code{@w{(setf cl-forms::form-csrf-protection-p)}}

T when csrf protection is enabled@item @code{csrf-field-name} --- initarg: @code{@w{:csrf-field-name}}; reader: @code{@w{cl-forms::form-csrf-field-name}}; writer: @code{@w{(setf cl-forms::form-csrf-field-name)}}

csrf field name@item @code{errors} --- reader: @code{@w{cl-forms:form-errors}}; writer: @code{@w{(setf cl-forms:form-errors)}}

Form errors after validation. An association list with elements (<field> . <field errors strings list>).@item @code{display-errors} --- initarg: @code{@w{:display-errors}}; reader: @code{@w{cl-forms::display-errors}}; writer: @code{@w{(setf cl-forms::display-errors)}}

A list containing the places where to display errors. Valid options are :list and :inline@item @code{client-validation} --- initarg: @code{@w{:client-validation}}; reader: @code{@w{cl-forms::client-validation}}; writer: @code{@w{(setf cl-forms::client-validation)}}

When T, form client validation is enabled@end itemize

@endcldefclass

@cldefclass {CL-FORMS, TEXT-FORM-FIELD}

A text field. Renders as a text area

Class precedence list: @code{text-form-field, string-form-field, form-field, standard-object, t}

@endcldefclass



@node Index
@chapter Index

@printindex cp
@printindex vr
@printindex fn

@bye
