\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@settitle CL-FORMS
@syncodeindex pg cp
@setfilename cl-forms.info
@include common-lisp.texi

@copying

Copyright @copyright{} 2021 Mariano Montone

@end copying


@dircategory Common Lisp
@direntry
* cl-forms: (cl-forms) Common Lisp web forms handling library.
@end direntry

@titlepage
@title CL-FORMS

@author Mariano Montone ( @email{marianomontone@@gmail.com} )
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Top
@cindex cl-forms

@menu
* Intro::
* Installation::
* Usage::
* API::
* Index::
@end menu

@node Intro
@chapter Introduction
@anchor{introduction}

CL-FORMS is a web forms handling library for Common Lisp.

Although it is potentially framework agnostic, it runs on top of Hunchentoot at the moment.

It features:

@itemize @bullet
@item
Several form field types: String, boolean, integer, email, password fields. And more.
@item Custom fields. CL-FORMS is extensible and it is possible to define new field types.
@item Server and client side validation
@item Rendering backends. Forms can be rendered via CL-WHO, or Djula, or something else; the backend is pluggable. The default renderer is CL-WHO.
@item Themes (like Bootstrap)
@item Control on rendering and layout.
@item Handling of form errors.
@item CSRF protection
@end itemize

@node Installation
@chapter Installation
@anchor{installation}

@node Usage
@chapter Usage
@anchor{usage}

@section Basics

Use @clref{CL-FORMS, DEFFORM, macro} to define a form. Example:

@lisp
(defform fields-form (:action "/fields-post")
  ((name :string :value "")
   (ready :boolean :value t)
   (sex :choice :choices (list "Male" "Female") :value "Male")
   (submit :submit :label "Create")))
@end lisp

On your web handler, grab the form via `get-form`, select a renderer with `with-form-renderer`and then render the form with `render-form`:

@lisp
(let ((form (forms::get-form 'fields-form)))
   (forms:with-form-renderer :who
      (forms:render-form form))
@end lisp

To handle the form, grab it via `get-form` and then call `handle-request` (you should probably also call `validate-form` after). 
Then bind form fields via either `with-form-field-values`, that binds the form field values; or `with-form-fields` that binds the form fields.

@lisp
(let ((form (forms:get-form 'fields-form)))
    (forms::handle-request form)
    (forms::with-form-field-values (name ready sex) form
       (who:with-html-output (forms.who::*html*)
          (:ul
            (:li (who:fmt "Name: ~A" name))
            (:li (who:fmt "Ready: ~A" ready))
            (:li (who:fmt "Sex: ~A" sex))))))
@end lisp

Plase have a look at the demo sources for more examples of how to use the library

@section Demo

There's a demo included. To run:

@lisp
(require :cl-forms.demo)
(forms.test:run-demo)
@end lisp

@subsection Basic example

Define a form. Render the form via CL-WHO backend, doing:

@lisp
(forms:with-form-renderer :who
   (forms:render-form form))
@end lisp

Then handle and validate the form.

Source code:

@lisp
@include ../test/demo/fields.lisp
@end lisp

@subsection Validation

Example of forms validation.

Add Clavier constraints to the form. Then call @clref{CL-FORMS, VALIDATE-FORM, function} after @clref{CL-FORMS, HANDLE-REQUEST, function}.

@lisp
@include ../test/demo/validation.lisp
@end lisp

@subsection Client validation

To validate in the client, just set @code{:client-validation} to @code{T}.

@lisp
@include ../test/demo/client-validation.lisp
@end lisp

@subsection Models

Forms can be attached to model objects. Model objects are CLOS instances from where form values are read and written to.

To work with models, forms are defined via defform-builder instead of defform. A form-builder is a function that takes the model objects and attaches it to the form. The form needs to define the accessors to access the model for each form field.

@lisp
@include ../test/demo/models.lisp
@end lisp

@subsection Composition

It is possible to compose forms using the @code{subform} field type:

@lisp
@include ../test/demo/composition.lisp
@end lisp

@subsection Form templates

Form templates is an alternative way of defining and rendering forms. Instead of defining a form with defform and then specifiying a template and render it, forms templates allow to do all that at the same time.

@lisp
@verbatiminclude ../test/demo/form-templates.lisp
@end lisp

@subsection Renderers

@lisp
@include ../test/demo/renderers.lisp
@end lisp

@node API
@chapter API
@anchor{api}

@menu
* CL-FORMS package::
@end menu

@node CL-FORMS package
@section CL-FORMS package
(@clpackage :cl-forms)

@node Index
@chapter Index

@printindex cp
@printindex vr
@printindex fn

@bye
